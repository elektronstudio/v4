// const randomNumbers = Array.from({ length: 1000 }).map((_) =>
//   parseFloat(String(Math.random()).slice(0, 4))
// );
// console.log(randomNumbers)

// TODO: Rely on autoload
import { average } from "~~/composables/math";

export const randomNumbers = [
  0.6, 0.9, 0.96, 0.69, 0.38, 0.47, 0.23, 0.46, 0.17, 0.83, 0.83, 0.51, 0.2,
  0.52, 0.37, 0.76, 0.29, 0.36, 0.75, 0.94, 0.18, 0.52, 0.87, 0.92, 0.02, 0.27,
  0.05, 0.06, 0.43, 0.19, 0.14, 0.2, 0.2, 0.09, 0.78, 0.01, 0.29, 0.39, 0.41,
  0.82, 0, 0.69, 0.93, 0.05, 0.34, 0.16, 0.72, 0.15, 0.06, 0.65, 0.18, 0.5,
  0.92, 0.61, 0.03, 0.98, 0.24, 0.94, 0.83, 0.1, 0.88, 0.76, 0.03, 0.48, 0.26,
  0.03, 0.62, 0.34, 0.45, 0.45, 0.61, 0.26, 0.31, 0.7, 0.3, 0.63, 0.32, 0.08,
  0.63, 0.61, 0.56, 0.15, 0.52, 0.57, 0.36, 0.53, 0.66, 0.55, 0.79, 0.19, 0.82,
  0.68, 0.37, 0.49, 0.65, 0.4, 0.68, 0.57, 0.71, 0.79, 0.1, 0.51, 0.38, 0.99,
  0.25, 0.14, 0.72, 0.28, 0.78, 0.28, 0.31, 0.67, 0.78, 0.48, 0.11, 0.97, 0.63,
  0.92, 0.93, 0.04, 0.76, 0.96, 0.82, 0.99, 0.34, 0.86, 0.93, 0.9, 0.29, 0.85,
  0.25, 0.97, 0.25, 0.93, 0.61, 0.59, 0.82, 0.15, 0.64, 0.6, 0.32, 0.48, 0.41,
  0.63, 0.98, 0.62, 0.82, 0, 0.33, 0.08, 0.75, 0.09, 0.15, 0.25, 0.54, 0.63,
  0.01, 0.3, 0.54, 0.14, 0.37, 0.53, 0.37, 0.9, 0.54, 0.78, 0.02, 0.28, 0.41, 0,
  0.27, 0.39, 0.1, 0.89, 0.31, 0.44, 0.65, 0.45, 0.47, 0.11, 0.32, 0.94, 0.84,
  0.38, 0.25, 0.05, 0.97, 0.56, 0.57, 0.07, 0.85, 0.74, 0.06, 0.99, 0.62, 0.63,
  0.89, 0.3, 0.92, 0.75, 0.49, 0.29, 0.2, 0.73, 0.37, 0.71, 0.95, 0.04, 0.95,
  0.39, 0.42, 0.41, 0.51, 0.89, 0.08, 0.28, 0.24, 0.33, 0.36, 0.97, 0.65, 0.59,
  0.8, 0.28, 0.29, 0.05, 0.1, 0.93, 0.55, 0.98, 0.69, 0.32, 0.13, 0.7, 0.61,
  0.58, 0.78, 0.29, 0.18, 0.37, 0.82, 0.75, 0.92, 0.52, 0.36, 0.47, 0.37, 0.62,
  0.94, 0.41, 0.31, 0.21, 0.78, 0.28, 0.44, 0.87, 0.64, 0.76, 0.25, 0.71, 0.73,
  0.62, 0.46, 0.08, 0.59, 0.39, 0.16, 0.56, 0.54, 0.36, 0.11, 0.39, 0.37, 0.88,
  0.62, 0.31, 0.98, 0.05, 0.95, 0.58, 0.02, 0.25, 0.6, 0.19, 0.4, 0.07, 0.39,
  0.57, 0.36, 0.11, 0.93, 0.05, 0.44, 0.71, 0.82, 0.13, 0.97, 0.1, 0.06, 0.54,
  0.26, 0.45, 0.55, 0.78, 0.65, 0.65, 0.21, 0.32, 0.59, 0.2, 0.67, 0.24, 0.18,
  0.3, 0.54, 0.46, 0.09, 0.55, 0.72, 0.67, 0.92, 0.89, 0.98, 0.6, 0.39, 0.02,
  0.05, 0.39, 0.56, 0.41, 0.64, 0.75, 0.15, 0.34, 0.64, 0.13, 0.46, 0.14, 0.16,
  0.56, 0.79, 0.18, 0.25, 0.24, 0.22, 0.2, 0.25, 0.98, 0.54, 0.2, 0.52, 0.83,
  0.66, 0.16, 0.33, 0.56, 0.84, 0.07, 0.47, 0.89, 0.09, 0.58, 0.28, 0.58, 0.42,
  0.79, 0.01, 0.63, 0.69, 0.94, 0.39, 0.64, 0.15, 0.31, 0.83, 0.38, 0.76, 0.45,
  0.08, 0.12, 0.8, 0.43, 0.6, 0.79, 0.03, 0.69, 0.87, 0.37, 0.27, 0.99, 0.41,
  0.61, 0.92, 0.74, 0.44, 0.2, 0.92, 0.75, 0.66, 0.12, 0.47, 0.74, 0.9, 0.03,
  0.94, 0.06, 0.79, 0.82, 0.83, 0.73, 0.47, 0.63, 0.12, 0.67, 0.55, 0.95, 0.88,
  0.55, 0.73, 0.96, 0.03, 0.19, 0.09, 0.74, 0.57, 0.05, 0.71, 0.85, 0.59, 0.18,
  0.37, 0.17, 0.54, 0.01, 0.17, 0.79, 0.77, 0.9, 0.08, 0.69, 0.3, 0.62, 0.82,
  0.09, 0.44, 0.38, 0.6, 0.04, 0.15, 0.4, 0.72, 0.27, 0.35, 0.96, 0.86, 0.3,
  0.99, 0.16, 0.59, 0.14, 0.9, 0.68, 0.51, 0.06, 0.21, 0.99, 0.23, 0.01, 0.81,
  0.98, 0.2, 0.09, 0.09, 0.89, 0.38, 0.96, 0.07, 0.89, 0.32, 0.48, 0.7, 0.75,
  0.41, 0.77, 0.14, 0.31, 0.06, 0.74, 0.64, 0.3, 0.6, 0.7, 0.27, 0.52, 0.46,
  0.21, 0.09, 0.54, 0.1, 0.08, 0.95, 0.42, 0.42, 0.87, 0.43, 0.77, 0.9, 0.6,
  0.94, 0.99, 0.65, 0.72, 0.93, 0.74, 0.11, 0.29, 0.36, 0.8, 0.3, 0.41, 0.57,
  0.36, 0.42, 0.93, 0.05, 0.52, 0.14, 0.4, 0.17, 0.16, 0.41, 0.42, 0.45, 0.68,
  0.14, 0.62, 0.14, 0.01, 0.2, 0.16, 0.79, 0.72, 0.92, 0.76, 0.03, 0.53, 0.32,
  0.77, 0.48, 0.64, 0.19, 0.35, 0.47, 0.86, 0.57, 0.78, 0.19, 0.14, 0.8, 0.56,
  0.32, 0.26, 0.35, 0.03, 0.41, 0.44, 0.32, 0.09, 0.34, 0.51, 0.49, 0.4, 0.4, 0,
  0.33, 0.22, 0.35, 0.33, 0.79, 0.64, 0.16, 0.19, 0.04, 0.18, 0, 0.46, 0.06,
  0.86, 0.14, 0.97, 0.61, 0.07, 0.56, 0.08, 0.19, 0.01, 0.8, 0.5, 0.63, 0.02,
  0.25, 0.59, 0.73, 0.96, 0.97, 0.75, 0.89, 0.79, 0.99, 0.6, 0.64, 0.21, 0.57,
  0.89, 0.95, 0.88, 0.83, 0.28, 0.25, 0.7, 0.66, 0.79, 0.03, 0.9, 0.43, 0.91,
  0.51, 0.72, 0.25, 0.6, 0.84, 0.64, 0.87, 0.18, 0.24, 0.21, 0.84, 0.22, 0.03,
  0.51, 0.85, 0.79, 0.25, 0.42, 0.54, 0.23, 0.08, 0.31, 0.4, 0.47, 0.73, 0.73,
  0.9, 0.59, 0.78, 0.99, 0.99, 0.16, 0.57, 0.23, 0.28, 0.82, 0.76, 0.98, 0.49,
  0.16, 0.43, 0.59, 0.79, 0.26, 0.05, 0.94, 0.08, 0.09, 0.8, 0.26, 0.75, 0.57,
  0.2, 0.66, 0.2, 0.37, 0.43, 0.25, 0.82, 0.71, 0.65, 0.63, 0.03, 0.67, 0.03,
  0.03, 0.18, 0.71, 0.74, 0.28, 0.74, 0.53, 0.25, 0.68, 0.56, 0.36, 0.81, 0.38,
  0.3, 0.1, 0.8, 0.53, 0.05, 0.87, 0.68, 0.84, 0.93, 0.12, 0.33, 0.34, 0.09,
  0.91, 0.86, 0.77, 0.93, 0.24, 0.82, 0.38, 0.9, 0.64, 0.91, 0.49, 0.03, 0,
  0.51, 0.34, 0.72, 0.23, 0.89, 0.62, 0.14, 0.54, 0.85, 0.26, 0.75, 0.43, 0.32,
  0.3, 0.51, 0.62, 0.18, 0.56, 0.22, 0.04, 0.34, 0.08, 0.07, 0.85, 0.43, 0.02,
  0.18, 0.03, 0.38, 0.29, 0.08, 0.71, 0.94, 0.78, 0.05, 0.9, 0.67, 0.68, 0.1,
  0.64, 0.67, 0.68, 0.42, 0.82, 0.61, 0.7, 0.64, 0.42, 0.97, 0.58, 0.36, 0.55,
  0.65, 0.05, 0.18, 0.21, 0.7, 0.78, 0.49, 0.6, 0.59, 0.64, 0.86, 0.6, 0.69,
  0.41, 0.17, 0.22, 0.98, 0.25, 0.11, 0.77, 0.52, 0.57, 0.47, 0.77, 0.63, 0.42,
  0.94, 0.55, 0.11, 0.17, 0.99, 0.13, 0.04, 0.52, 0.25, 0.07, 0.55, 0.45, 0.02,
  0.94, 0.61, 0.38, 0.69, 0.88, 0.71, 0.51, 0.57, 0.36, 0.69, 0.6, 0.24, 0.23,
  0.95, 0.31, 0.16, 0.56, 0.74, 0.46, 0.14, 0.71, 0.42, 0.29, 0.33, 0.02, 0.26,
  0.59, 0.2, 0.24, 0.92, 0.8, 0.54, 0.89, 0.76, 0.79, 0.41, 0.59, 0.16, 0.71,
  0.22, 0.26, 0.23, 0.22, 0.29, 0.56, 0.04, 0.31, 0.39, 0.28, 0.15, 0.69, 0.17,
  0.69, 0.97, 0.44, 0.83, 0.19, 0.12, 0.74, 0.14, 0.86, 0.49, 0.46, 0.1, 0.05,
  0.53, 0.04, 0.98, 0.39, 0.83, 0.85, 0.57, 0.69, 0.96, 0.78, 0.35, 0.33, 0.65,
  0.52, 0.52, 0.55, 0.52, 0.45, 0.72, 0.46, 0.14, 0.66, 0.84, 0.38, 0.82, 0.35,
  0.76, 0.03, 0.93, 0.15, 0.12, 0.46, 0.89, 0.78, 0.36, 0.62, 0.78, 0.39, 0.54,
  0.45, 0.87, 0.49, 0.48, 0.71, 0.21, 0.93, 0.93, 0.23, 0.03, 0.96, 0.61, 0.7,
  0.14, 0.48, 0.69, 0.9, 0.03, 0.18, 0.27, 0.89, 0.69, 0.43, 0.65, 0.55, 0.71,
  0.21, 0.22, 0.61, 0.98, 0.65, 0.06, 0.52, 0.86, 0.41, 0.61, 0.49, 0.85, 0.5,
  0.84, 0.18, 0.01, 0.3, 0.07, 0.18, 0.13, 0.86, 0.39, 0.78, 0.89, 0.21, 0.04,
  0.23, 0.89, 0.91, 0.99, 0.39, 0.54, 0.31, 0.9, 0.33, 0.56, 0.29, 0.82, 0.23,
  0.72, 0.01, 0.44, 0.19, 0.49, 0.62, 0.85, 0.5, 0.55, 0.8,
];

export const stringToNumbers = (str: string) =>
  [...str].map((s) => s.codePointAt(0));

export const numberToRandom = (numbers: number[]) => {
  const half = Math.ceil(numbers.length / 2);
  const x = Math.floor(average(numbers.slice(0, half)));
  const y = Math.floor(average(numbers.slice(-half)));
  return [randomNumbers[x % 1000], randomNumbers[y % 1000]];
};

export const numbersToRandom = (numbers) => {
  if (numbers.length === 1) {
    const half = Math.ceil(numbers[0] / 2);
    return numberToRandom([numbers[0], half]);
  }
  return numberToRandom(numbers);
};

export const numbersToCoords = (numbers: number[]) => {
  if (numbers.length === 1) {
    const half = Math.ceil(numbers[0] / 2);
    return numberToRandom([numbers[0], half]);
  }
  return numberToRandom(numbers);
};

export const stringToCoords = (str, xSize, ySize) => {
  const [x, y] = numbersToRandom(stringToNumbers(str));
  return [x * xSize, y * ySize];
};

export const stringToColor = (str) => {
  const [x, y] = numbersToRandom(stringToNumbers(str));
  const h = Math.floor(x * 360);
  const s = Math.floor(y * 100);
  const l = 50;
  return hsl(h, s, l);
};
